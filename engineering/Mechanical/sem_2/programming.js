module.exports = course = {
    outline:
        '[THE LABORATORY SHOULD BE PRECEDED OR FOLLOWED BY A TUTORIAL TO EXPLAIN THE APPROACH OR ALGORITHM TO BE IMPLEMENTED FOR THE PROBLEM GIVEN.]\nTUTORIAL 1: PROBLEM SOLVING USING COMPUTERS:\nLAB1: FAMILIARIZATION WITH PROGRAMMING ENVIRONMENT\nTUTORIAL 2: VARIABLE TYPES AND TYPE CONVERSIONS:\nLAB 2: SIMPLE COMPUTATIONAL PROBLEMS USING ARITHMETIC EXPRESSIONS\nTUTORIAL 3: BRANCHING AND LOGICAL EXPRESSIONS:\nLAB 3: PROBLEMS INVOLVING IF-THEN-ELSE STRUCTURES\nTUTORIAL 4: LOOPS, WHILE AND FOR LOOPS:\nLAB 4: ITERATIVE PROBLEMS E.G., SUM OF SERIES\nTUTORIAL 5: 1D ARRAYS: SEARCHING, SORTING:\nLAB 5: 1D ARRAY MANIPULATION\nTUTORIAL 6: 2D ARRAYS AND STRINGS\nLAB 6: MATRIX PROBLEMS, STRING OPERATIONS \nTUTORIAL 7: FUNCTIONS, CALL BY VALUE:\nLAB 7: SIMPLE FUNCTIONS\nTUTORIAL 8: NUMERICAL METHODS (ROOT FINDING, NUMERICAL DIFFERENTIATION, \nNUMERICAL INTEGRATION):\nLAB 8: PROGRAMMING FOR SOLVING NUMERICAL METHODS PROBLEMS\nTUTORIAL 9: RECURSION, STRUCTURE OF RECURSIVE CALLS \nLAB 9: RECURSIVE FUNCTIONS \nTUTORIAL 10: POINTERS, STRUCTURES AND DYNAMIC MEMORY ALLOCATION\nLAB 10: POINTERS AND STRUCTURES\nTUTORIAL 11: FILE HANDLING:\nLAB 11: FILE OPERATIONS',
    objecttives: [
        ' TO FORMULATE SIMPLE ALGORITHMS FOR ARITHMETIC AND LOGICAL PROBLEMS.\n TO TRANSLATE THE ALGORITHMS TO PROGRAMS (IN C LANGUAGE).\n TO TEST AND EXECUTE THE PROGRAMS AND CORRECT SYNTAX AND LOGICAL ERRORS.\n TO IMPLEMENT CONDITIONAL BRANCHING, ITERATION AND RECURSION.\n TO DECOMPOSE A PROBLEM INTO FUNCTIONS AND SYNTHESIZE A COMPLETE PROGRAM USING DIVIDE AND CONQUER APPROACH.\n TO USE ARRAYS, POINTERS AND STRUCTURES TO FORMULATE ALGORITHMS AND PROGRAMS.\n TO APPLY PROGRAMMING TO SOLVE MATRIX ADDITION AND MULTIPLICATION PROBLEMS AND SEARCHING AND SORTING PROBLEMS.\n TO APPLY PROGRAMMING TO SOLVE SIMPLE NUMERICAL METHOD PROBLEMS, NAMELY ROT FINDING OF FUNCTION, DIFFERENTIATION OF FUNCTION AND SIMPLE INTEGRATION.',
    ],
    name: 'PROGRAMMING FOR PROBLEM SOLVING and PROGRAMMING FOR PROBLEM SOLVING LAB.',
    code: ' 100104 & 100204',
    credits: 5,
    content: [
        {
            module: '1',
            topics: ' INTRODUCTION TO PROGRAMMING: INTRODUCTION TO COMPONENTS OF A COMPUTER SYSTEM (DISKS, MEMORY, PROCESSOR, WHERE A PROGRAM IS STORED AND EXECUTED, OPERATING SYSTEM, COMPILERS ETC). IDEA OF ALGORITHM: STEPS TO SOLVE LOGICAL AND NUMERICAL PROBLEMS. REPRESENTATION OFALGORITHM: FLOWCHART/PSEUDO CODE WITH EXAMPLES. FROM ALGORITHMS TO PROGRAMS; SOURCE CODE, VARIABLES (WITH DATA TYPES) VARIABLES AND MEMORY LOCATIONS, TYPE CASTING/TYPE CONVERSION, RUN TIME ENVIRONMENT (STATIC, DYNAMIC LOCATION), STORAGE CLASSES (AUTO, REGISTER, STATIC, EXTERN), SYNTAX AND LOGICAL ERRORS IN COMPILATION, OBJECT AND EXECUTABLE CODE.',
        },
        {
            module: '2',
            topics: ' OPERATORS: ARITHMETIC EXPRESSIONS/ARITHMETIC OPERATORS/RELATIONAL OPERATORS/LOGICAL OPERATORS/BITWISE OPERATORS AND PRECEDENCE ',
        },
        {
            module: '3',
            topics: 'CONDITIONAL BRANCHING AND LOOPS: WRITING AND EVALUATION OF CONDITIONALS AND CONSEQUENT BRANCHING, ITERATION AND LOOPS',
        },
        {
            module: '4',
            topics: 'ARRAYS: ARRAY DECLARATION & INITIALIZATION, BOUND CHECKING ARRAYS (1-D, 2-D), CHARACTER ARRAYS AND STRINGS.',
        },
        {
            module: '5',
            topics: ' BASIC ALGORITHMS: SEARCHING (LINEAR SEARCH, BINARY SEARCH ETC.), BASIC SORTING ALGORITHMS (BUBBLE, INSERTION AND SELECTION), FINDING ROOTS OF EQUATIONS, NOTION OF ORDER OF COMPLEXITY THROUGH EXAMPLE PROGRAMS (NO FORMAL DEFINITION REQUIRED)',
        },
        {
            module: '6',
            topics: ' FUNCTION: INTRODUCTION & WRITING FUNCTIONS, SCOPE OF VARIABLES FUNCTIONS (INCLUDING USING BUILT IN LIBRARIES), PARAMETER PASSING IN FUNCTIONS, CALL BY VALUE, PASSING ARRAYS TO FUNCTIONS: IDEA OF CALL BY REFERENCE',
        },
        {
            module: '7',
            topics: ' RECURSION: RECURSION, AS A DIFFERENT WAY OF SOLVING PROBLEMS. EXAMPLE PROGRAMS, SUCH AS FINDING FACTORIAL, FIBONACCI SERIES, REVERSE A STRING USING RECURSION, AND GCD OF TWO NUMBERS, ACKERMAN FUNCTION ETC. QUICK SORT OR MERGE SORT.',
        },
        {
            module: '8',
            topics: 'STRUCTURE/UNION: STRUCTURES, ACCESSING STRUCTURE ELEMENTS, WAY OF STORAGE OF STRUCTURE ELEMENT, DEFINING STRUCTURES AND ARRAY OF STRUCTURES, BASIC DEFINITION OF UNION,COMPARISON B/W STRUCTURE & UNION WITH EXAMPLE',
        },
        {
            module: '9',
            topics: 'POINTERS: IDEA OF POINTERS, DEFINING POINTERS, USE OF POINTERS IN SELF-REFERENTIAL STRUCTURES, NOTION OF LINKED LIST (NO IMPLEMENTATION), POINTER TO POINTER, POINTER TO ARRAY, POINTER TO STRINGS, ARRAY OF POINTER, POINTER TO FUNCTION, POINTER TO STRUCTURE. ',
        },
        {
            module: '10',
            topics: 'FILE HANDLING: (ONLY IF TIME IS AVAILABLE, OTHERWISE SHOULD BE DONE AS PART OF THE LAB)',
        },
    ],
    books: [
        { name: 'SCHAUM S OUTLINE OF PROGRAMMING WITH C', author: 'BYRON GOTTFRIED' },
        { name: 'PROGRAMMING IN ANSI C', author: 'E. BALAGURUSWAMY' },
        { name: 'THE C PROGRAMMING LANGUAGE', author: 'BRIAN W. KERNIGHAN AND DENNIS M. RITCHIE' },
        { name: 'LET US C', author: 'YASHWANT KANETKAR' },
    ],

    outcomes: [
        'TO FORMULATE THE ALGORITHMS FOR SIMPLE PROBLEMS',
        ' TO TRANSLATE GIVEN ALGORITHMS TO A WORKING AND CORRECT PROGRAM',
        ' TO BE ABLE TO CORRECT SYNTAX ERRORS AS REPORTED BY THE COMPILERS',
        ' TO BE ABLE TO IDENTIFY AND CORRECT LOGICAL ERRORS ENCOUNTERED AT RUN TIME',
        ' TO BE ABLE TO WRITE ITERATIVE AS WELL AS RECURSIVE PROGRAMS',
        ' TO BE ABLE TO REPRESENT DATA IN ARRAYS, STRINGS AND STRUCTURES AND MANIPULATE THEM THROUGH A PROGRAM',
        ' TO BE ABLE TO DECLARE POINTERS OF DIFFERENT TYPES AND USE THEM IN DEFINING SELF- REFERENTIAL STRUCTURES.',
        ' TO BE ABLE TO CREATE, READ AND WRITE TO AND FROM SIMPLE TEXT FILES.',
    ],
};
