module.exports = course = {
    outline:
        '',
    objecttives: [
        ' To develop a formal notation for strings, languages and machines.\n To design finite automata to accept a set of strings of a language.\n To prove that a given language is regular and apply the closure properties of languages.\n Design context free grammars to generate strings from a context free language and convert them into normal forms.\n Prove equivalence of languages accepted by Push Down Automata and languages generated by context free grammars\n Identify the hierarchy of formal languages, grammars and machines.\n Distinguish between computability and non-computability and Decidability and undesirability',
    ],
    name: 'Formal Language & Automata Theory',
    code: 'PCC CS 502',
    credits: 4,
    content: [
        {
            module: '1',
            topics: 'Introduction: Alphabet, languages and grammars, productions and derivation, Chomsky hierarchy of languages. \nRegular languages and finite automata: Regular expressions and languages, deterministic finite automata (DFA) and equivalence with regular expressions, nondeterministic finite automata (NFA) and equivalence with DFA, regular grammars and equivalence with finite automata, properties of regular languages, pumping lemma for regular languages, minimization of finite automata.',
        },
        {
            module: '2',
            topics: 'Context-free languages and pushdown automata: Context-free grammars (CFG) and Context-free languages (CFL), Chomsky and Greibach normal forms, nondeterministic pushdown automata (PDA) and equivalence with CFG, parse trees, ambiguity in CFG, pumping lemma for context-free languages, deterministic pushdown automata, closure properties of CFLs. ',
        },
        {
            module: '3',
            topics: 'Context-sensitive languages: Context-sensitive grammars (CSG) and Context-sensitive languages, linear bounded automata and equivalence with CSG. ',
        },
        {
            module: '4',
            topics: 'Turing machines: The basic model for Turing machines (TM), Turing recognizable (Recursively enumerable) and Turing-decidable (recursive) languages and their closure properties, variants of Turing machines, nondeterministic TMs and equivalence with deterministic TMs, unrestricted grammars and equivalence with Turing machines, TMs as enumerators. ',
        },
        {
            module: '5',
            topics: 'Undecidability: Church-Turing thesis, universal Turing machine, the universal and diagonalization languages, reduction between languages and Rice’s theorem, undecidable problems about languages.',
        },
    ],
    books: [
        { name: 'Introduction to Automata Theory, Languages, and Computation', author: 'John E. Hopcroft, Rajeev Motwani and Jeffrey D. Ullman' },
        { name: ' Elements of the Theory of Computation', author: 'Harry R. Lewis and Christos H. Papadimitriou' },
        { name: 'Introduction to the Theory of Computation', author: 'Michael Sipser' },
    ],

    outcomes: [
        '1. Write a formal notation for strings, languages and machines.',
        '2. Design finite automata to accept a set of strings of a language.',
        '3. For a given language determine whether the given language is regular or not.',
        '4. Design context free grammars to generate strings of context free language.',
        '5. Determine equivalence of languages accepted by Push Down Automata and languages generated by context free grammars',
        '6. Write the hierarchy of formal languages, grammars and machines.',
        '7. Distinguish between computability and non-computability and Decidabilit And undecidability.',
    ],
};
